generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

// Users of the software

model Usuario {
    id             String   @id @default(uuid())
    username       String
    password       String
    createdAt      DateTime @default(now())
    cliente        Cliente  @relation(fields: [clienteId], references: [id])
    clienteId      String   @unique
    rol            String
    foto           String?
    sedeDelegacion String
}

model Cliente {
    id                   String       @id @default(uuid())
    dni                  String       @unique
    nombres              String
    apellidoPaterno      String
    apellidoMaterno      String
    usuario              Usuario?
    conductor            Conductor?
    encomiendasEnviadas  Encomienda[] @relation("remitente")
    encomiendasRecibidas Encomienda[] @relation("destinatario")
    boleto               Boleto?
}

model Encomienda {
    id             String   @id @default(uuid())
    remitente      Cliente  @relation(name: "remitente", fields: [remitenteId], references: [id])
    remitenteId    String
    destinatario   Cliente  @relation(name: "destinatario", fields: [destinatarioId], references: [id])
    destinatarioId String
    createdAt      DateTime @default(now())
    fechaEnvio     DateTime
    comprobante    String
    estado         Boolean
    descripcion    String
    viaje          Viaje    @relation(fields: [viajeId], references: [id])
    viajeId        String
}

model Conductor {
    id                 String  @id @default(uuid())
    cliente            Cliente @relation(fields: [clienteId], references: [id])
    foto               String?
    clienteId          String  @unique
    viaje              Viaje?  @relation(fields: [viajeId], references: [id])
    viajeId            String?
    licencia           String
    tipoLicencia       String
    estadoDocumentario String
    disponibilidad     Boolean
}

// Travel Tickets generated by the system
model Boleto {
    id              String   @id @default(uuid())
    cliente         Cliente  @relation(fields: [clienteId], references: [id])
    clienteId       String   @unique
    viaje           Viaje    @relation(fields: [viajeId], references: [id])
    viajeId         String   @unique
    asiento         Int
    telefonoCliente String
    precio          Int
    createdAt       DateTime @default(now())
    equipaje        String[]
}

// Travels made by the buses from the origin to the destination
model Viaje {
    id          String       @id @default(uuid())
    bus         Bus          @relation(fields: [busId], references: [id])
    busId       String
    fechaSalida DateTime
    horaSalida  String
    tarifas     Int[]
    boletos     Boleto[]
    encomiendas Encomienda[]
    conductores Conductor[]
    ruta        Ruta         @relation(fields: [rutaId], references: [id])
    rutaId      String
    createdAt   DateTime     @default(now())
    estado      String
    activo      Boolean
}

// Buses registered in the company
model Bus {
    id        String   @id @default(uuid())
    modelo    String?  @default("Scania Touring")
    foto      String
    placa     String   @unique
    asientos  Int
    createdAt DateTime @default(now())
    Viaje     Viaje[]
}

// Routes that the buses can take
model Ruta {
    id               String   @id @default(uuid())
    ciudadOrigen     String
    ciudadDestino    String
    terminalOrigen   String
    terminalDestino  String
    duracionEstimada Int?
    Viaje            Viaje[]
    createdAt        DateTime @default(now())
}
