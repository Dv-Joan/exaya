// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

model Usuario {
    id        Int      @id @default(autoincrement())
    email     String   @unique
    username  String?  @unique
    password  String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Persona {
    id       Int     @id @default(autoincrement())
    nombre   String
    apellido String
    telefono String
    email    String?

    Pasajero     Pasajero?
    Conductor    Conductor?
    Remitente    Encomienda[] @relation("remitente")
    Destinatario Encomienda[] @relation("destinatario")
}

model Pasajero {
    id        Int     @id @default(autoincrement())
    persona   Persona @relation(fields: [personaId], references: [id])
    personaId Int     @unique
    Boleto    Boleto?
}

model Conductor {
    id        Int     @id @default(autoincrement())
    persona   Persona @relation(fields: [personaId], references: [id])
    personaId Int     @unique
    Viaje     Viaje[]
}

model Boleto {
    id          Int      @id @default(autoincrement())
    pasajero    Pasajero @relation(fields: [pasajeroId], references: [id])
    pasajeroId  Int      @unique
    viaje       Viaje    @relation(fields: [viajeId], references: [id])
    viajeId     Int      @unique
    asiento     String
    fechaCompra DateTime
}

model Viaje {
    id           Int          @id @default(autoincrement())
    origen       String
    destino      String
    fechaSalida  DateTime
    fechaLlegada DateTime
    boletos      Boleto[]
    encomiendas  Encomienda[]
    manifiesto   Manifiesto?
    conductores  Conductor[]
    Ruta         Ruta?        @relation(fields: [rutaId], references: [id])
    rutaId       Int?
}

model Encomienda {
    id             Int     @id @default(autoincrement())
    remitente      Persona @relation(name: "remitente", fields: [remitenteId], references: [id])
    remitenteId    Int
    destinatario   Persona @relation(name: "destinatario", fields: [destinatarioId], references: [id])
    destinatarioId Int
    contenido      String
    viaje          Viaje?  @relation(fields: [viajeId], references: [id])
    viajeId        Int?
}

model Manifiesto {
    id          Int    @id @default(autoincrement())
    viaje       Viaje  @relation(fields: [viajeId], references: [id])
    viajeId     Int    @unique
    pasajeros   String // lista pasajeros 
    encomiendas String // lista encomiendas
}

model Bus {
    id       Int    @id @default(autoincrement())
    modelo   String
    placa    String @unique
    asientos Int
}

model Ruta {
    id Int @id @default(autoincrement())

    ciudadOrigen     String
    ciudadDestino    String
    duracionEstimada Int?
    tarifas          Int[]

    viajes Viaje[]
}
